<?phprequire_once BASE_DIR . LIBS . DB . DBPROVIDER;/** * Object of a db-table representation. * * @warning Extended properties of this class. * Must be different from null * * @author Gabriel Elias GonzÃ¡lez Disla */abstract class dbobject extends stdClass {    /**     * String with the name of the db-table     * @var string     */    private $_tname = "";    /**     *     * @var string     */    private $_idfieldname = "Id";    /**     *     * @var string     */    private $_idlanguagefield = "LangId";    /**     * True if you want the database object to show     * the results of the query     * @var boolean     */    private $_debug = true;    /**     * Object constructor     *     * @param type $id id of the element to construct.     * @param string $cname name of the class inherited     * @param string $idlanguagefield name of language field of the table     * @param string $idfieldname name of the primary key of the table     *     */    public function __construct($id, $cname, $idlanguagefield = "", $idfieldname = "")     {        $this->_tname = $cname;        if ($idlanguagefield != "")         {            $this->_idlanguagefield = $idlanguagefield;        }        if ($idfieldname != "")         {            $this->_idfieldname = $idfieldname;        }        $db = $this->getProvider($this->_debug);        $properties = $this->getAttributes();        if (!isset($properties[$this->_idfieldname]))         {            return false;        }        if (is_numeric($id) == false)         {            return false;        }        if ($id < 0)         {            return false;        }        $query = $db->find($this->_tname, $id, $this->_idfieldname, $this->_idfieldname, false, 0, 2, $this->_idfieldname);        $db->Query($query);        $row = $db->getNextObject();        if ($row)         {            foreach ($row as $r => $rval)             {                if (array_key_exists($r,$properties))                 {                    $this->set($r, $rval);                }            }        }    }    /**     * Update the object to the database     *     * @return dbobject not false on success.     */    public function update()     {        $properties = $this->getAttributes();        $db = $this->getProvider($this->_debug);        $id = $this->{$this->_idfieldname};        if(count($properties) == 1)        {            if(isset($properties[$this->_idfieldname]))            {                return $this;            }        }        $UpdateQuery = $db->update($properties, $this->_tname, $id, $this->_idfieldname);        $return = $db->Query($UpdateQuery);        if ($return == false)        {             return $return;        }        return $this;    }    /**     * Insert the object to the database     *     * @return dbobject not false on success.     */    public function insert()     {        $properties = $this->getAttributes();        $db = $this->getProvider($this->_debug);        $InsertQuery = $db->insert($properties, $this->_tname, $this->_idfieldname);        $return = $db->Query($InsertQuery);                if ($return == false)        {            return false;        }        else         {            $query = "SELECT * FROM #__$this->_tname ORDER BY $this->_idfieldname DESC";            $db->Query($query);            $row = $db->getNextObject();            if ($row)             {                foreach ($row as $r => $rval)                 {                    if (array_key_exists($r, $properties) == true)                     {                        $this->$r = $rval;                    }                }                return $this;            }            return false;        }    }    /**     * Delete the object instance in the database     *     * @param string|array $field name of the field to search for delete.     * when $field is an array. field array(array(fieldname => OP)) when value is     * the statement field[i] of the value value[i] and OP are      * the following operators:     * Op(=, !=, <>).     * @param string|array $value value of the field to search for delete.     * when $value is an array. value array(array(val1 => Glue)) when value is     * the value[i] of the statement field[i] and GLue are logic operators:     * Logic(AND, OR).     *     * @warning if the funtion is used without parameters     * there`s only a successful delete if the object     * Id is found in the database.     *     * @return boolean|dbobject Not false on success.     */    public function delete($field = "", $value = "")     {        $idfield = $this->_idfieldname;        $id = $this->get($idfield);        $db = $this->getProvider($this->_debug);        $DelQuery = $db->delete($this->_tname, $value, $field, $id, $idfield);        if($DelQuery !== false)        {            $return = $db->Query($DelQuery);            if ($return == false)            {                return $return;            }            return $this;        }        return false;    }        /**     * Selects one object from the table depending on which     * attribute you are looking for.     *     * @param string|array $field name of the field to search for delete.     * when $field is an array. field array(array(fieldname => OP)) when value is     * the statement field[i] of the value value[i] and OP are      * the following operators:     * Op(=, !=, <>).     * @param string|array $value value of the field to search for delete.     * when $value is an array. value array(array(val1 => Glue)) when value is     * the value[i] of the statement field[i] and GLue are logic operators:     * Logic(AND, OR).     * @param  boolean $DESC ascendent     * @param  string  $order_field Field for the order by     * @param  integer $lower_limit  lower limit on the query, it must be     * an integer otherwise is going to be ignored     * @param  integer $upper_limit higher limit on the query, it must be     * an integer otherwise is going to be ignored     *     * @return dbobject|boolean object on success, false on error.     */    public function find($field = "", $value = "", $DESC = true, $order_field = "", $lower_limit = null, $upper_limit = null)     {        $db = $this->getProvider($this->_debug);        $getQuery = $db->find($this->_tname, $value, $field, $order_field, $DESC, $lower_limit, $upper_limit, $this->_idfieldname);        $obj = $this->getObjectName();        if ($db->Query($getQuery) != true)         {            return new $obj(-1);        }        $row = $db->getNextObject();        $newobj = new $obj(-1);        $idfield = $this->_idfieldname;        if ($row)         {            if(isset($row->$idfield))            {              $newobj = new $obj($row->$idfield);              }            return $newobj;        }        return new $obj(-1);    }    /**     * Selects all the objects from the table depending on which     * attribute you are looking for.     *     * @param string|array $field name of the field to search for delete.     * when $field is an array. field array(array(fieldname => OP)) when value is     * the statement field[i] of the value value[i] and OP are      * the following operators:     * Op(=, !=, <>).     * @param string|array $value value of the field to search for delete.     * when $value is an array. value array(array(val1 => Glue)) when value is     * the value[i] of the statement field[i] and GLue are logic operators:     * Logic(AND, OR).     * @param  boolean $DESC ascendent     * @param  string  $order_field Field for the order by     * @param  integer $lower_limit  lower limit on the query, it must be     * an integer otherwise is going to be ignored     * @param  integer $upper_limit higher limit on the query, it must be     * an integer otherwise is going to be ignored     *     * @return dbobject|boolean array on success, false on error.     */    public function findAll($field = "", $value = "", $DESC = true, $order_field = "", $lower_limit = null, $upper_limit = null)     {        $db = $this->getProvider($this->_debug);        $getQuery = $db->find($this->_tname, $value, $field, $order_field, $DESC, $lower_limit, $upper_limit, $this->_idfieldname);        if ($db->Query($getQuery) != true)         {            return array();        }        $row = null;        $arr = array();        $obj = $this->getObjectName();        while ($row = $db->getNextRow())         {            $temp = new $obj(-1);            $temp->setAttributes($row);            $arr[] = $temp;        }        if (count($arr) == 0)        {            return array();        }        else        {            return $arr;        }    }    /**     * Returns the name of the object.     * @return string     */    public function getObjectName() {        return get_class($this);    }    /**     * Checks if the object exists in the database     *     * @return boolean false if does not have a record     */    public function ObjExist()     {        $properties = $this->getAttributes();        if (isset($properties[$this->_idfieldname]))         {            $Id = $properties[$this->_idfieldname];            $getQuery = "SELECT * FROM #__$this->_tname ";            $getQuery .= " Where `$this->_idfieldname` = '$Id'";            $db = $this->getProvider($this->_debug);            if ($db->Query($getQuery) == true)             {                return true;            }            else            {                return false;            }        }        return false;    }    /**     * sets the debug     *     * @param type $bool true if you want to debug     */    public function setDebug($bool)     {        $this->_debug = $bool;    }        /**     * @return boolean true if the provider is debugging     */    public function getDebug()    {        return $this->_debug;    }    /**     * gets the name of the database table     * @return string     */    public function getTableName()     {        return $this->_tname;    }    /**     * return an instance of the dbprovider object.     *     * @return dbprovider     */    public function getProvider($debug = false)     {        $newProv = new dbprovider($debug);        return $newProv;    }    /**     *     * @return array Hash of $name => $value from the     * object attributes.     */    public function getAttributes()     {        $blocker = get_class_vars(get_class());        $sba = get_class_vars($this->getObjectName());        $Attributes = array();        foreach ($sba as $k => $val)         {            if (!isset($blocker[$k]))             {                $Attributes[$k] = $this->$k;            }        }        return $Attributes;    }    /**     * Updates the class attributes from the array     *     * @param array $values Hash of $name => $value     */    public function setAttributes($values)     {        $properties = $this->getAttributes();        if(is_array($values))        {            foreach ($values as $k => $val)             {                if (array_key_exists($k,$properties))                 {                    $this->$k = $val;                }            }        }    }    /**     * returns the other dal class values      * @param string $cname name of the class     * @param string $field name of the field in     * the object to search     * @param type $value value of the object to search     *     * @return dbobject|false array of objects of the other language values.     * false if the object does not exist     */    public function getOtherClassValues($cname, $field, $value)     {        if (class_exists($cname) == true)         {            $obj = new $cname(0);            return $obj->findAll($field, $value);        }        return false;    }    /**     * @return string the name of the language field     */    public function getLanguageField()     {        return $this->_idlanguagefield;    }    /**     * @return string the name of the primary key field     */    public function getPrimaryKeyField()     {        return $this->_idfieldname;    }    /**     * gets the property of the object     *     * @param string $key name of the property     * @return mixed value of the property, false if the property does not exist.     */    public function get($key)     {        $class_var = get_class_vars($this->_tname);        $upper_class_var = get_class_vars(get_class($this));        if (isset($class_var[$key]))         {            $return = $this->$key;            return $return;        }         else if (isset($upper_class_var[$key]))         {            $return = $this->$key;            return $return;        }         else if (method_exists($this, 'get' . $key) === true)         {            $fname = 'get' . $key;            return $this->$fname();        }        return false;    }    /**     * sets the property of the object     *     * @param string $key name of the property     * @param mixed $value value of the property     *     * @return boolean true if the property was set, false if the property does not exist.     *     */    public function set($key, $value)     {        $class_var = get_class_vars($this->_tname);        $upper_class_var = get_class_vars(get_class($this));        if (isset($class_var[$key]))         {            $this->$key = $value;            return true;        }         else if (isset($upper_class_var[$key]))         {            $this->$key = $value;            return true;        }         else if (method_exists($this, 'set' . $key) === true)         {            $fname = 'set' . $key;            $this->$fname($value);            return true;        }        return false;    }    /**     * set values for the  select box in a form     *     * @param string $label by default is name, it's the field to be presented in the select box     * @param string $value by default is id, it's the value related to the selected element     * @param string $selectedValue by defalut null, it's the selected value by default     * @param array $dbarray by default it's  all elements in the related table, it's the object array to be processed     *     * @return array the specific array for the selectbox     */    public function setSelectValues($label = "Name", $value = "Id", $selectedValue = null, $dbarray = null)     {        $selectArray = array("0" => "");        if ($dbarray === null)         {            $dbarray = $this->findAll("", "", false);        }        foreach ($dbarray as $box)         {            if (isset($box->$value) && isset($box->$label))             {                if ($box->$value == $selectedValue)                 {                    $selectArray['#__' . $box->$value] = $box->$label;                }                 else                 {                    $selectArray[$box->$value] = $box->$label;                }            }             else             {                break;            }        }        return $selectArray;    }    public function setCheckboxValues($label = "name", $value = "id" ,$selectedValues = array(), $property = "", $remove = "", $dbarray = null)    {         $selectArray = array();         if($dbarray === null)         {             $dbarray = $this->findAll("", "", false);         }         $cont = count($selectedValues);          foreach ($dbarray as $box)           {            if (isset($box->$value) && isset($box->$label))             {                if($box->$value != $remove)                {                $bool = false;                for($i = 0; $i < $cont; $i++)                {                  if($box->$value == $selectedValues[$i]->$property)                  {                        $selectArray["#__".$box->$value] = $box->$label;                        $bool = true;                  }                }                   if($i == $cont && $bool == false)                   {                      $selectArray[$box->$value] = $box->$label;                   }                 }             }              else              {                 break;             }        }        return $selectArray;    }    /**     * Add another attribute to the obj.     * @param string $key     * @param string $value     */    public function addAttribute($key, $value, $prefix = "")     {        $class_var = get_class_vars($this->_tname);        if (!isset($class_var[$key]))        {            $this->$key = $value;        }        else         {            if ($prefix == "")            {                $key = uniqid() . "_" . $key;            }            else             {                $key = $prefix . "_" . $key;            }            $this->$key = $value;        }    }        /**     * Creates a hash from a list of dbobjects      *      * @param dbobject $objs list of dbobjects     * @param string   $key_field name of the property     * in the object that is going to be the key field      * for the hash.     * @param string   $value_field name of the property     * in the object that is going to be the key field      * for the hash.     * @param array|string $selected mixed value for selected values     * in the list, array of strings or a string.     *      * @return array hash of the filtered values from the     * dbobject list, ex: array( $obj->key_field=> $obj->value_field)     */    public static function convertListToHash($objs, $key_field, $value_field, $selected=null, $add_empty=false)    {        $result = array();        if($add_empty == true)        {            $result = array('-1'=>'');        }        foreach($objs as $obj)        {            if(is_array($selected))            {                $set = false;                foreach($selected as $svalue)                {                    if($obj->get($key_field) == $svalue)                    {                        $result["#__".$obj->get($key_field)]= $obj->get($value_field);                        $set=true;                        break;                    }                }                if($set == false)                {                  $result[$obj->get($key_field)]= $obj->get($value_field);                  }            }            else {                if($obj->get($key_field) == $selected)                {                    $result["#__".$obj->get($key_field)]= $obj->get($value_field);                }                else                 {                    $result[$obj->get($key_field)]= $obj->get($value_field);                }            }                    }        return $result;    }        /**     * Creates list of objects from a hash      *      * @param array $hash array of hash of values     * @param string   $key_field name of the property     * in the object that is going to be the key field      * @param string   $value_field name of the property     * in the object that is going to be the key field      *      * @return array object list.     */    public static function convertHashToObjArray($hash, $key_field, $value_field)    {        $result = array();        foreach($hash as $obj)        {            $std = new stdClass;            $std->$key_field = $obj[$key_field];            $std->$value_field = $obj[$value_field];            $result[]=$std;        }        return $result;    }        /**     * Creates a array from a list of dbobjects      *      * @param dbobject $objs list of dbobjects     * @param string   $key_field name of the property     * in the object that is going to be the key field      * for the array.     *      * @return array array of the filtered values from the     * dbobject list, ex: array( $obj->key_field )     */    public static function convertListToArray($objs, $key_field)    {        $result = array();        foreach($objs as $obj)        {            $result[]= $obj->get($key_field);        }        return $result;    }                /**     * Gets the error msg of the last executed query in the object     * @return string error message     */    public function getErrorMsg()    {        $pro=$this->getProvider($this->_debug);        return $pro->errormsg;    }}