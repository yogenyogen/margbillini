<?php/** * Description of FormRangeSlider * * @author Gabriel */class FormRangeSlider {    protected $html=null;    protected $jscode=null;    public $min=0;    public $max=10;    public $id="";    public $name="";    public $type="min";    public $value=0;    public $step=1;    public $currency="";    public  static $instance_name='';    /**     * @var FormRangeSlider     */    public static $instances=array();    /**     * Construct an RangeSliderField     * for this field you must include the following css and js files     * <link rel="stylesheet" href="../<?php echo LIBS.JS.JQUERY_UI.JQUERY_BASE_CSS.JQUERY_UI_CSS; ?>" >     * <script type="text/javascript" src="../<?php echo LIBS.JS.JQUERY18; ?>" ></script>     * <script type="text/javascript" src="../<?php echo LIBS.JS.JQUERY_UI.JQUERY_UI_CORE; ?>" ></script>     * <script type="text/javascript" src="../<?php echo LIBS.JS.JQUERY_UI.JQUERY_UI_WIDGET; ?>" ></script>     * <script type="text/javascript" src="../<?php echo LIBS.JS.JQUERY_UI.JQUERY_UI_MOUSE; ?>" ></script>     * <script type="text/javascript" src="../<?php echo LIBS.JS.JQUERY_UI.JQUERY_UI_SLIDER; ?>" ></script>     *      * @param string $id     * @param string $name     * @param string $value     * @param integer $min     * @param integer $max     * @param string $type      */    public function __construct($id, $name, $value, $min=0, $max=10, $type="min", $currency="AÃ±os", $step=1)     {       $this->id=$id;       $this->name=$name;       $this->min=$min;       $this->max = $max;       $this->type=$type;       $this->step=$step;       $this->currency = $currency;       if(is_numeric($value) == true)       {           $this->value = $value;       }       else        {           $this->value=0;       }              $funcname='set'.$type;       if(method_exists($this, $funcname) == true)       {            $this->$funcname();       }       self::$instances[]=$this;    }    public function setmin()    {        if(count(self::$instances)==0)        {            $varname='ins'.  uniqid(). $this->name;            self::$instance_name=$varname;            $this->jscode='var '.$varname.'=jQuery.noConflict();';        }        else        {            $varname=self::$instance_name;        }                $this->jscode.='            '.$varname.'( "#'.$this->id.'-'.$this->type.'" )[0].slide=null;          '.$varname.'(function() {            '.$varname.'( "#'.$this->id.'-'.$this->type.'" ).slider({                            range: "'.$this->type.'",                            min: '.$this->min.',                            max: '.$this->max.',                            step: '.$this->step.',                            value: '.$this->value.',                            slide: function( event, ui ) {                                    '.$varname.'( "#'.$this->id.'" ).val( ui.value );                            }                    });                    '.$varname.'( "#'.$this->name.'" ).val(  '.$varname.'( "#'.$this->id.'-'.$this->type.'" ).slider( "value" ) );          });      '.$varname.'.noConflict(true);';       $this->html='<table>                    <tr>                        <td>                            <p>                                <input type="text" id="'.$this->id.'" name="'.$this->name.'" value="'.$this->value.'" style="color:#f6931f; font-weight:bold;" readonly="readonly" />                                <label for="'.$this->name.'">'.$this->currency.'</label>                            </p>                        </td>                    </tr>                    <tr>                        <td>                        <div id="'.$this->id.'-'.$this->type.'"></div>                            </td>                    </tr>                    </table>';    }        public function setminmax()    {        if(count(self::$instances)==0)        {            $varname='ins'.  uniqid(). $this->name;            self::$instance_name=$varname;            $this->jscode='var '.$varname.'=jQuery.noConflict();';        }        else        {            $varname=self::$instance_name;        }        $this->jscode.='            '.$varname.'( "#'.$this->id.'-'.$this->type.'" )[0].slide=null;          '.$varname.'(function() {            '.$varname.'( "#'.$this->id.'-'.$this->type.'" ).slider({                            range: true,                            min: '.$this->min.',                            max: '.$this->max.',                            step: '.$this->step.',                            values: [ '.($this->min).', '.($this->max).' ],                            slide: function( event, ui ) {                                    '.$varname.'( "#'.$this->id.'" ).val( ui.values[ 0 ] + " - " + ui.values[ 1 ]  );                            }                    });                    '.$varname.'( "#'.$this->id.'" ).val( '.$this->min.' +" - " + '.$this->max.' );          });';       $this->html='<table>                    <tr>                        <td>                            <p>                                <input type="text" id="'.$this->id.'" name="'.$this->name.'" style="color:#f6931f; font-weight:bold;" readonly="readonly" />                                <label for="'.$this->name.'">'.$this->currency.'</label>                            </p>                        </td>                    </tr>                    <tr>                        <td>                        <div id="'.$this->id.'-'.$this->type.'"></div>                            </td>                    </tr>                    </table>';    }    /**     * Displays the editor      */    public function display()    {        $html = "";        $html.= "<script type=\"text/javascript\">";        $html.=$this->jscode;        $html.="</script>";        $html.=$this->html;        echo $html;    }    /**     * Gets the html of the generated editor     * @return string html of the editor      */    public function getHtml()    {        $html = "";        $html.= "<script type=\"text/javascript\">";        $html.=$this->jscode;        $html.="</script>";        $html.=$this->html;        return $html;    }}?>